/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Model.Agenda;
import Model.conInit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;

/**
 *
 * @author Myth
 */
public class AgendaView extends javax.swing.JFrame {

    /**
     * Creates new form AgendaView
     */
    public AgendaView() {
        initComponents();
        setLocationRelativeTo();
        addPopup();
        addPopup2();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public JPopupMenu pop = new JPopupMenu();
    public JPopupMenu pop2 = new JPopupMenu();
    int index_menu = 0;
    int index_cod = 0;

    private void addPopup() {
        JMenuItem cad = new JMenuItem("Adicionar");
        JMenuItem show = new JMenuItem("Ver Dados");
        JMenuItem queue = new JMenuItem("Agendar");
        JMenuItem delete = new JMenuItem("Excluir");

        pop.add(cad);
        pop.add(show);
        pop.add(queue);
        pop.add(delete);
        pop.setPopupSize(150, 150);

        cad.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Cadastro c = new Cadastro();
                c.cad_Alter.setVisible(false);
                c.setLocationRelativeTo(null);
                c.setVisible(true);
            }
        });
        show.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {

                Agenda clientes = Agenda.atualizarAgenda();

                Cadastro cad = new Cadastro();
                cad.setLocationRelativeTo(null);
                cad.cli_id.setText(String.valueOf(clientes.getCliente(index_menu).getId()));
                cad.cad_nome.setText(clientes.getCliente(index_menu).getNome());
                cad.cad_sobrenome.setText(clientes.getCliente(index_menu).getSobrenome());
                cad.cad_tel.setText(clientes.getCliente(index_menu).getTel());
                cad.cad_email.setText(clientes.getCliente(index_menu).getEmail());
                cad.cad_endr.setText(clientes.getCliente(index_menu).getEndr());
                cad.Cad_sub.setVisible(false);
                cad.setVisible(true);
            }
        });

        queue.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Calendarium calendar = new Calendarium();
                calendar.setLocationRelativeTo(null);
                calendar.cal_nome.setText(listaContatos.getSelectedValue());

                Agenda clientes = Agenda.atualizarAgenda();
                calendar.cli_id_queue.setText(String.valueOf(clientes.getCliente(index_menu).getId()));
                atualizarQueue();
                calendar.setVisible(true);
            }
        });

        delete.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null, "Tem certeza que quer deletar " + listaContatos.getSelectedValue(), "Warning", dialogButton);
                if (dialogResult == JOptionPane.YES_OPTION) {

                    Agenda clientes = Agenda.atualizarAgenda();
                    clientes.apagar(clientes.getCliente(index_menu));
                    preecherLista();

                }
            }
        });
    }

    private void addPopup2() {
        JMenuItem show = new JMenuItem("Ver Detalhes");
        JMenuItem delete = new JMenuItem("Excluir");

        pop2.add(show);
        pop2.add(delete);
        pop2.setPopupSize(150, 150);

        show.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                verCompr v = new verCompr();
                String ver = new String();
                String[] ver_A = new String[5];
                ver = listaCompromissos.getSelectedValue();
                ver_A = ver.split(" ");
                v.ver_Nome.setText(ver_A[3]);
                v.ver_Data.setText(ver_A[0]);
                v.ver_Hora.setText(ver_A[2]);
                v.setVisible(true);

            }
        });

        delete.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null, "Tem certeza que quer deletar " + listaCompromissos.getSelectedValue(), "Warning", dialogButton);
                if (dialogResult == JOptionPane.YES_OPTION) {

                    String compr = new String();
                    String[] comps = new String[50];
                    compr = listaCompromissos.getSelectedValue();
                    comps = compr.split(" ");
                    try {

                        String sql = "delete from queue where data=? and hora=? ";
                        PreparedStatement stm = conInit.getConexao().prepareStatement(sql);
                        stm.setString(1, comps[0]);
                        stm.setString(2, comps[2]);
                        stm.executeUpdate();

                        atualizarQueue();
                        stm.close();
                    } catch (SQLException | ClassNotFoundException ex) {
                        Logger.getLogger(AgendaView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaCompromissos = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaContatos = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Agenda x");
        setResizable(false);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Agenda X");

        listaCompromissos.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        listaCompromissos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = atualizarQueue();
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listaCompromissos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaCompromissos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaCompromissosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listaCompromissos);

        jTabbedPane1.addTab("Compromissos", jScrollPane2);

        listaContatos.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        listaContatos.setModel(new javax.swing.AbstractListModel<String>() {

            public Agenda clientes =  Agenda.atualizarAgenda();
            public int getSize() { return clientes.size(); }
            public String getElementAt(int i) { return clientes.getCliente(i).toString(); }
        });
        listaContatos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaContatos.setToolTipText(null);
        listaContatos.setAlignmentX(2.5F);
        DefaultListCellRenderer renderer =  (DefaultListCellRenderer)listaContatos.getCellRenderer();
        renderer.setHorizontalTextPosition(SwingConstants.CENTER);
        listaContatos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        listaContatos.setSelectedIndex(6);
        listaContatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaContatosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listaContatos);

        jTabbedPane1.addTab("Clientes", jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listaContatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaContatosMouseClicked
        index_menu = listaContatos.getSelectedIndex();

        if (SwingUtilities.isRightMouseButton(evt)) {
            pop.show(listaContatos, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_listaContatosMouseClicked

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained

    }//GEN-LAST:event_formFocusGained

    private void listaCompromissosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaCompromissosMouseClicked
        if (SwingUtilities.isRightMouseButton(evt)) {
            pop2.show(listaCompromissos, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_listaCompromissosMouseClicked
    public static String[] atualizarQueue() {

        int i = 0;
        Connection conexao;
        String[] strings = new String[50];
        try {
            conexao = conInit.getConexao();
            String sql = "select q.data, q.hora, q.descr, c.nome "
                    + "from queue q "
                    + "inner join cadastro c on c.cod=q.cli_id "
                    + "where q.data > now()";
            PreparedStatement stm = conexao.prepareStatement(sql);
            ResultSet rs = stm.executeQuery();
            while (rs.next()) {

                strings[i] = rs.getString("data") + " As " + rs.getString("hora") + " " + rs.getString("nome");
                i++;
            }

        } catch (SQLException ex) {
            Logger.getLogger(Calendarium.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Calendarium.class.getName()).log(Level.SEVERE, null, ex);
        }

        listaCompromissos.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        return strings;
    }

    public void setLocationRelativeTo() {
        this.setLocationRelativeTo(null); //To change body of generated methods, choose Tools | Templates.
    }

    public static void preecherLista() {
        listaContatos.setModel(new javax.swing.AbstractListModel<String>() {

            Agenda clientes = Agenda.atualizarAgenda();

            public int getSize() {
                return clientes.size();
            }

            public String getElementAt(int i) {
                return clientes.getCliente(i).toString();
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgendaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgendaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgendaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgendaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgendaView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private static javax.swing.JList<String> listaCompromissos;
    public static javax.swing.JList<String> listaContatos;
    // End of variables declaration//GEN-END:variables

}
